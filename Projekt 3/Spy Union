import numpy as np

def fill(stri):
    def sublist(lista, value):
        lp1 = [lista[i] for i in range(len(lista)) if i % 4 == value]
        return lp1
    lp = [int(a) for a in stri.split()]
    result1 = {x:[] for x in range(lp[0])}
    result2 = {x:[] for x in range(lp[0])}
    lp.pop(0)
    count = 0
    for i in sublist(lp, 0):
        result1[i].append(count)
        count += 1
    count = 0
    for i in sublist(lp, 1):
        result2[i].append(count)
        count += 1
    result3 = sublist(lp, 2)
    result4 = sublist(lp, 3)
    result = [result1, result2, result3, result4]
    return result

def department(hierarchy):
    def find_boss(hierarchy):
        for i in range(len(hierarchy)):
            if i in hierarchy[i]:
                return(i)
    
    def scan(boss, supervisors):
        helpy = supervisors + [boss]
        result[boss].append(boss)
        if (len(hierarchy[boss]) != 0):
            for h in helpy:
                for t in hierarchy[boss]:
                    if(t != boss):
                        result[h].append(t)
        if (len(hierarchy[boss]) != 0):
            for t in hierarchy[boss]:
                if(t != boss):
                    scan(t, helpy)
    
    supervisor = []
    result = {x:[] for x in range(len(hierarchy))}
    boss = find_boss(hierarchy)
    scan(boss, supervisor)
    return(result)
    
def solve_problem(world):
    n = len(world[2])
    departmentsWSA = department(world[0])
    departmentsWU = department(world[1])
    P = MixedIntegerLinearProgram(maximization=False)
    var = P.new_variable(binary=True, nonnegative=True)
    P.set_objective(sum(var[k] for k in range(n)))
    for i in range(n):
        P.add_constraint(sum(var[k] for k in departmentsWSA[i]), min = world[2][i])
        P.add_constraint(sum(var[k] for k in departmentsWU[i]), min = world[3][i])
    print 'Optymalna wartość funkcji celu = ', P.solve()
    for i in range(n):
        print i, '=', P.get_values(var[i])

LP = \
"""
5
1 0 1 2
2 0 1 2
2 1 2 0
2 1 0 1
1 3 0 0
"""
world = fill(LP)
print(world)
print(department(world[0]))
print(department(world[1]))
#print(world[1])

solve_problem(world)

%typeset_mode True
import numpy as np
import itertools
def Program_Pomocniczy():
    n = int(raw_input("Proszê podaæ liczbê zmiennych :"))
    m = int(raw_input("Proszê podaæ liczbê ograniczeñ:"))
    A = np.zeros((m, n))
    b = []
    c = []
    for row in range(m):
        for column in range(n):
            A[row, column] = int(raw_input("Prosze podaæ %u wspolczynnik %u-go ograniczenia" %(column + 1, row + 1)))
    for i in range(m):
        b.append(int(raw_input("Proszê podaæ wspó³czynnik stoj¹cy po prawej stronie równania %u" % (i + 1))))
    for i in range(n):
        c.append(int(raw_input("Proszê podaæ %u wspó³czynnik funkcji celu" % (i + 1))))
    P = InteractiveLPProblem(A, b, c, variable_type = "")
    P = P.standard_form()
    val = P.Abcx()
    tmp = []
    tmp.append(np.hstack((np.array(val[0]), np.identity(m))))
    tmp.append(val[1])
    tmp.append(np.append(np.array(val[2]), np.zeros(m)))
    k=0
    for i in range(m):
        if b[i] < 0:
           k=1
    if k==0:
        print("Punkt 0 jest rozwi¹zaniem dopuszczalnym. Zwracam postaæ normaln¹ oryginalnego problemu.")
        return(tmp)
    temp=[]
    temp.append(np.hstack((np.array(tmp[0]), np.identity(m))))
    temp.append(val[1])
    temp.append(np.hstack((np.zeros(2*n+m), (-1)*(np.ones(m)))))
    P = InteractiveLPProblem(temp[0], temp[1], temp[2], variable_type = ">=")
    view(P)
    return

Program_Pomocniczy()
